Dir <- "D:/OneDrive - IATTC/IATTC/2020/BET assessment/SS Model/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/"
SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/"
model <- c("R","RG","RM","RS","G","M1","M2","S","L","LG","LM","LS")
model_name <- c("R","R-GC","R-MA","R-DS","GC","MJ","MA","DS","L","L-GC","L-MA","L-DS")
model_name2 <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
for (m in 1:12) {
for (s in 1:1) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
if (converge[m, s]) {
# copy old SS files to the new folder
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(
paste0(SSDir, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(SSDir, "/forecast.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(SSDir, "/ss.exe")
)
file.copy(from = files, to = NewPath)
}
# update data file
# data <- SS_readdat_3.30(file = paste0(NewPath, "/BET-EPO.dat"), verbose = FALSE)
#
# data$catch
# run the model
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2020/BET assessment/SS Model/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/"
SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/"
model <- c("R","RG","RM","RS","G","M1","M2","S","L","LG","LM","LS")
model_name <- c("R","R-GC","R-MA","R-DS","GC","MJ","MA","DS","L","L-GC","L-MA","L-DS")
model_name2 <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
for (m in 1:12) {
for (s in 1:1) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
if (converge[m, s]) {
# copy old SS files to the new folder
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(
paste0(SSDir, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(SSDir, "/forecast.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(SSDir, "/ss.exe")
)
file.copy(from = files, to = NewPath)
}
# update data file
# data <- SS_readdat_3.30(file = paste0(NewPath, "/BET-EPO.dat"), verbose = FALSE)
#
# data$catch
# run the model
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2020/BET assessment/SS Model/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/Update/"
model <- c("R","RG","RM","RS","G","M1","M2","S","L","LG","LM","LS")
model_name <- c("R","R-GC","R-MA","R-DS","GC","MJ","MA","DS","L","L-GC","L-MA","L-DS")
model_name2 <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
for (m in 1:1) {
for (s in 1:1) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
if (converge[m, s]) {
# copy old SS files to the new folder
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(
paste0(SSDir, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(SSDir, "/forecast.ss"),
paste0(Path, "/control.ss_new"),
paste0(Path, "/BET-EPO.dat"),
paste0(SSDir, "/ss.exe")
)
file.copy(from = files, to = NewPath)
}
# update data file
# data <- SS_readdat_3.30(file = paste0(NewPath, "/BET-EPO.dat"), verbose = FALSE)
#
# data$catch
# run the model
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
print(ss[38]) # final gradient
}
}
library(r4ss)
Dir <- "C:/Users/hkxu/OneDrive - IATTC/IATTC/2020/BET assessment/SS Model/"
NewDir <- "C:/Users/hkxu/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
SSDir <- "C:/Users/hkxu/OneDrive - IATTC/Git/UpdateAssessment/Document/Update/"
# Dir <- "D:/OneDrive - IATTC/IATTC/2020/BET assessment/SS Model/"
# NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
# SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/Update/"
model <- c("R","RG","RM","RS","G","M1","M2","S","L","LG","LM","LS")
model_name <- c("R","R-GC","R-MA","R-DS","GC","MJ","MA","DS","L","L-GC","L-MA","L-DS")
model_name2 <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
?SS_readctl_3.30(file = paste0(NewPath, "/control.ss_new"), verbose = FALSE)
ctl <- SS_readctl_3.30(file = paste0(NewPath, "/control.ss_new"), verbose = FALSE)
SS_readdat_3.30(file = paste0(NewPath, "/BET-EPO.dat"), verbose = FALSE)
SS_readctl_3.30(file = paste0(NewPath, "/control.ss_new"), verbose = FALSE)
ctl <- SS_readctl_3.30(file = paste0(NewPath, "/BET-EPO.ctl"), verbose = FALSE)
?SS_readctl
# Read in the dat file to define the structure of the control file so that
# you don't have to specify things in the function call such as 'Nfleet'
# datfilename <- dir(dirsimple, pattern = "data\\.ss", full.names = TRUE)
dat <- SS_readdat_3.30(file = paste0(NewPath, "/BET-EPO.dat"), verbose = FALSE)
# Read in the control file using a list object for datlist
ctl <- SS_readctl_3.30(
file = paste0(NewPath, "/control.ss_new"),
verbose = FALSE,
datlist = dat, use_datlist = TRUE)
View(ctl)
View(ctl[["size_selex_parms_tv"]])
View(ctl[["size_selex_parms"]])
ctl[["size_selex_parms_tv"]]
row.names(ctl[["size_selex_parms_tv"]])
str(ctl[["size_selex_parms_tv"]])
row.names.data.frame(ctl[["size_selex_parms_tv"]])
Selex <- ctl$size_selex_parms
?row.names.data.frame
?row.names
rows <- which(row.names(Selex) %in% c("SizeSel_Spine_Val_3_A1-LL-n(1)",
"SizeSel_Spine_Val_3_A5-OBJ(16)",
"SizeSel_Spine_Val_3_A2-NOADEL(19)"))
Selex[rows,"PHASE"]
Selex[rows,"PHASE"] <- 2
View(Selex)
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/dmsy/"
model <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
dir.create(NewDir)
for (m in 1:1) {
for (s in 1:1) {
if (converge[m, s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model_name[m],"-",toString(steepness[s]))
print(NewPath)
# step 1: creata a new folder for each run
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = NewPath)
# step 2: change par file
print("Change the starter file to 1 (from par) and turn off estimation!!!")
ParDir <- paste0(Path, "ss.par")
ParFile <- readLines(ParDir, warn = F)
Rep <- r4ss::SS_output(dir = Path, ncols = 400, covar = T, printstats = F, verbose = FALSE)
Recruit <- Rep$recruit$dev[which(Rep$recruit$era=="Main")]
bias_adjust <- -Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
Recruit_forecast <- c(Recruit + bias_adjust,0)
Line <- match("# Fcast_recruitments:", ParFile)
Line_error <- match("# Fcast_impl_error:", ParFile)
ParFile[Line + 1] <- gsub(",", "", toString(Recruit_forecast))
ParFile[Line_error + 1] <- gsub(",", "", toString(Recruit_forecast*0.0))
writeLines(ParFile, paste0(NewPath, "/ss.par"))
# step 3: change forecast file
ForecastDir <- paste0(SSDir, "forecast.ss")
ForecastFile <- readLines(ForecastDir, warn = F)
ForecastFile[13] <- toString(ifelse(m %in% seq(5,8),81,165))
writeLines(ForecastFile, paste0(NewPath, "/forecast.ss"))
# step 4: run ss
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
}
for (m in 1:1) {
for (s in 1:1) {
if (converge[m, s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
# step 1: creata a new folder for each run
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = NewPath)
# step 2: change par file
print("Change the starter file to 1 (from par) and turn off estimation!!!")
ParDir <- paste0(Path, "ss.par")
ParFile <- readLines(ParDir, warn = F)
Rep <- r4ss::SS_output(dir = Path, ncols = 400, covar = T, printstats = F, verbose = FALSE)
Recruit <- Rep$recruit$dev[which(Rep$recruit$era=="Main")]
bias_adjust <- -Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
Recruit_forecast <- c(Recruit + bias_adjust,0)
Line <- match("# Fcast_recruitments:", ParFile)
Line_error <- match("# Fcast_impl_error:", ParFile)
ParFile[Line + 1] <- gsub(",", "", toString(Recruit_forecast))
ParFile[Line_error + 1] <- gsub(",", "", toString(Recruit_forecast*0.0))
writeLines(ParFile, paste0(NewPath, "/ss.par"))
# step 3: change forecast file
ForecastDir <- paste0(SSDir, "forecast.ss")
ForecastFile <- readLines(ForecastDir, warn = F)
ForecastFile[13] <- toString(ifelse(m %in% seq(5,8),81,165))
writeLines(ForecastFile, paste0(NewPath, "/forecast.ss"))
# step 4: run ss
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
}
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
# step 1: creata a new folder for each run
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = NewPath)
# step 2: change par file
print("Change the starter file to 1 (from par) and turn off estimation!!!")
ParDir <- paste0(Path, "ss.par")
ParFile <- readLines(ParDir, warn = F)
ParDir <- paste0(Path, "/ss.par")
ParFile <- readLines(ParDir, warn = F)
Rep <- r4ss::SS_output(dir = Path, ncols = 400, covar = T, printstats = F, verbose = FALSE)
Recruit <- Rep$recruit$dev[which(Rep$recruit$era=="Main")]
bias_adjust <- -Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
Recruit_forecast <- c(Recruit + bias_adjust,0)
Line <- match("# Fcast_recruitments:", ParFile)
Line_error <- match("# Fcast_impl_error:", ParFile)
ParFile[Line + 1] <- gsub(",", "", toString(Recruit_forecast))
ParFile[Line_error + 1] <- gsub(",", "", toString(Recruit_forecast*0.0))
writeLines(ParFile, paste0(NewPath, "/ss.par"))
# step 3: change forecast file
ForecastDir <- paste0(SSDir, "forecast.ss")
ForecastFile <- readLines(ForecastDir, warn = F)
ForecastFile[13] <- toString(ifelse(m %in% seq(5,8),81,165))
writeLines(ForecastFile, paste0(NewPath, "/forecast.ss"))
# step 4: run ss
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
library(IATTCassessment)
Dir <- "C:/Users/hkxu/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
KobeDir <- "C:/Users/hkxu/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/Kobe/"
DynamicDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
# lyear <- 2019 # last year
FFleets <- c(1:23) # fishery fleets
STD_only <- FALSE # Kobe table is generated
model <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
dir.create(KobeDir)
for (m in 1:1) {
for (s in 1:1) {
if(converge[m,s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]),"/")
KobePath <- paste0(KobeDir,model_name[m],"-",toString(steepness[s]),"/")
DynamicPath <- paste0(DynamicDir,model_name[m],"-",toString(steepness[s]),"/")
print(Path)
# fyear <- ifelse(m %in% seq(5,8), 2000, 1979) # first year
# step 1: copy ss file
unlink(KobePath, recursive = TRUE, force = TRUE)
dir.create(KobePath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(KobeDir, "/starter.ss"),
paste0(Path, "/forecast.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/Report.sso"),
paste0(Path, "/CompReport.sso"),
paste0(Path, "/ss.par"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = KobePath)
# step 2: run trajectory
Kobe.Out <- make_kobetable_SAC11(Path,KobePath,FFleets,STD_only,newSS=TRUE, Path, Path, DynamicPath)
}
}
}
library(IATTCassessment)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
KobeDir <- "D:/Users/hkxu/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/Kobe/"
DynamicDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
# lyear <- 2019 # last year
FFleets <- c(1:23) # fishery fleets
STD_only <- FALSE # Kobe table is generated
model <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
dir.create(KobeDir)
KobeDir <- "D:/hkxu/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/Kobe/"
dir.create(KobeDir)
KobeDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/Kobe/"
dir.create(KobeDir)
for (m in 1:1) {
for (s in 1:1) {
if(converge[m,s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]),"/")
KobePath <- paste0(KobeDir,model[m],"-",toString(steepness[s]),"/")
DynamicPath <- paste0(DynamicDir,model[m],"-",toString(steepness[s]),"/")
print(Path)
# fyear <- ifelse(m %in% seq(5,8), 2000, 1979) # first year
# step 1: copy ss file
unlink(KobePath, recursive = TRUE, force = TRUE)
dir.create(KobePath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(KobeDir, "/starter.ss"),
paste0(Path, "/forecast.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/Report.sso"),
paste0(Path, "/CompReport.sso"),
paste0(Path, "/ss.par"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = KobePath)
# step 2: run trajectory
Kobe.Out <- make_kobetable_SAC11(Path,KobePath,FFleets,STD_only,newSS=TRUE, Path, Path, DynamicPath)
}
}
}
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
library(IATTCassessment)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
KobeDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/Kobe/"
DynamicDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
# lyear <- 2019 # last year
FFleets <- c(1:23) # fishery fleets
STD_only <- FALSE # Kobe table is generated
model <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
dir.create(KobeDir)
for (m in 1:1) {
for (s in 1:1) {
if(converge[m,s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]),"/")
KobePath <- paste0(KobeDir,model[m],"-",toString(steepness[s]),"/")
DynamicPath <- paste0(DynamicDir,model[m],"-",toString(steepness[s]),"/")
print(Path)
# fyear <- ifelse(m %in% seq(5,8), 2000, 1979) # first year
# step 1: copy ss file
unlink(KobePath, recursive = TRUE, force = TRUE)
dir.create(KobePath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(KobeDir, "/starter.ss"),
paste0(Path, "/forecast.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/Report.sso"),
paste0(Path, "/CompReport.sso"),
paste0(Path, "/ss.par"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = KobePath)
# step 2: run trajectory
Kobe.Out <- make_kobetable_SAC11(Path,KobePath,FFleets,STD_only,newSS=TRUE, Path, Path, DynamicPath)
}
}
}
# tested on Sep. 8 2021
# Line 55 needs to be updated for addition years
library(r4ss)
Dir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS/"
NewDir <- "D:/OneDrive - IATTC/IATTC/2021/UpdateAssessment/SS(dmsy)/"
SSDir <- "D:/OneDrive - IATTC/Git/UpdateAssessment/Document/dmsy/"
model <- c("Env-Fix","Env-Gro","Env-Mrt","Env-Sel","Gro","Mov","Mrt","Sel","Srt-Fix","Srt-Gro","Srt-Mrt","Srt-Sel")
steepness <- seq(1,0.7,-0.1)
converge <- matrix(1,nrow=length(model),ncol=length(steepness))
converge[1,2:4] <- 0
converge[9,4] <- 0
dir.create(NewDir)
for (m in 1:3) {
for (s in 1:1) {
if (converge[m, s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
# step 1: creata a new folder for each run
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = NewPath)
# step 2: change par file
print("Change the starter file to 1 (from par) and turn off estimation!!!")
ParDir <- paste0(Path, "/ss.par")
ParFile <- readLines(ParDir, warn = F)
Rep <- r4ss::SS_output(dir = Path, ncols = 400, covar = T, printstats = F, verbose = FALSE)
Recruit <- Rep$recruit$dev[which(Rep$recruit$era=="Main")]
bias_adjust <- -Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
Recruit_forecast <- c(Recruit + bias_adjust,0)
Line <- match("# Fcast_recruitments:", ParFile)
Line_error <- match("# Fcast_impl_error:", ParFile)
ParFile[Line + 1] <- gsub(",", "", toString(Recruit_forecast))
ParFile[Line_error + 1] <- gsub(",", "", toString(Recruit_forecast*0.0))
writeLines(ParFile, paste0(NewPath, "/ss.par"))
# step 3: change forecast file
ForecastDir <- paste0(SSDir, "forecast.ss")
ForecastFile <- readLines(ForecastDir, warn = F)
ForecastFile[13] <- toString(ifelse(m %in% seq(5,8),81,165))
writeLines(ForecastFile, paste0(NewPath, "/forecast.ss"))
# step 4: run ss
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
}
Rep$recruit$dev[which(Rep$recruit$era=="Main")]
-Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
for (m in 1:3) {
for (s in 1:1) {
if (converge[m, s]) {
Path <- paste0(Dir,model[m],"-",toString(steepness[s]))
NewPath <- paste0(NewDir,model[m],"-",toString(steepness[s]))
print(NewPath)
# step 1: creata a new folder for each run
unlink(NewPath, recursive = TRUE, force = TRUE)
dir.create(NewPath)
files = c(paste0(Path, "/go_nohess.bat"),
paste0(SSDir, "/starter.ss"),
paste0(Path, "/BET-EPO.ctl"),
paste0(Path, "/BET-EPO.dat"),
paste0(Path, "/ss.exe"))
file.copy(from = files, to = NewPath)
# step 2: change par file
print("Change the starter file to 1 (from par) and turn off estimation!!!")
ParDir <- paste0(Path, "/ss.par")
ParFile <- readLines(ParDir, warn = F)
Rep <- r4ss::SS_output(dir = Path, ncols = 400, covar = F, printstats = F, verbose = FALSE)
Recruit <- Rep$recruit$dev[which(Rep$recruit$era=="Main")]
bias_adjust <- -Rep$recruit$biasadjuster[which(Rep$recruit$era=="Main")]*0.6^2/2
Recruit_forecast <- c(Recruit + bias_adjust,0)
Line <- match("# Fcast_recruitments:", ParFile)
Line_error <- match("# Fcast_impl_error:", ParFile)
ParFile[Line + 1] <- gsub(",", "", toString(Recruit_forecast))
ParFile[Line_error + 1] <- gsub(",", "", toString(Recruit_forecast*0.0))
writeLines(ParFile, paste0(NewPath, "/ss.par"))
# step 3: change forecast file
ForecastDir <- paste0(SSDir, "forecast.ss")
ForecastFile <- readLines(ForecastDir, warn = F)
ForecastFile[13] <- toString(ifelse(m %in% seq(5,8),81,165))
writeLines(ForecastFile, paste0(NewPath, "/forecast.ss"))
# step 4: run ss
setwd(NewPath)
command <- paste("cd", NewPath, "& go_noHess.bat", sep = " ")
ss <- shell(cmd = command, intern = T, wait = T)
}
}
}
